#!/bin/bash
set -euxo pipefail

: =================================
: Create/Recreate an EXODUS service
: =================================
:
: 'Syntax is ./create_service APP_CODE HOST_DIR "[BASE_DB_CODE]" live|test'
:
: 'Example:  ./create_service exo exodus "" live'
:
: 'Example:  ./create_service agy watermelon "" test'
:
	APP_CODE=${1:?APP_CODE is required.}
	HOST_DIR=${2:?HOST_DIR is required.}
	BASE_DB_CODE=${3:-${HOST_DIR}}
	LIVE_OR_TEST=${4}
:
	SERVICE_CODE=${APP_CODE}_$LIVE_OR_TEST
	FULL_SERVICE_CODE=$SERVICE_CODE@${BASE_DB_CODE}

:
: Check syntax
: ============
:
	if [ $LIVE_OR_TEST != live -a $LIVE_OR_TEST != test ]; then
:		'Syntax error'
		exit 1
	fi

:
: For live databases, EXO_HOME is $HOME/live and EXO_DICT=exodus
: For test databases, EXO_HOME is $HOME      and EXO_DICT=exodus_live
: =========================================
:
	if [ $LIVE_OR_TEST = test ]; then
		export EXO_HOME=$HOME
		export IDB_CODE=%i_test
		export IDB_CODES=%i_test
		export FULL_DB_CODE=${BASE_DB_CODE}_test
		export DICTDB=exodus
	else
		export EXO_HOME=$HOME/live
		export IDB_CODE="%i"
		export IDB_CODES="%i %i %i"
		export FULL_DB_CODE=${BASE_DB_CODE}
		export DICTDB=exodus_live
	fi
:

	WORK_DIR1=~/hosts/$HOST_DIR/work/
	WORK_DIR2=~/hosts/%i/work/
	WORK_DIR3=~/hosts/$HOST_DIR/work/
:
    if [ $HOST_DIR = "ptcy" ]; then
        WORK_DIR2=~/hosts/ptcy/work/
    fi

:
: Symbolic link for extra databases that dont match the working directory
: =======================================================================
:
	HOST_DIR1=${WORK_DIR1%/work/}
	HOST_DIR3=${WORK_DIR3%/work/}
	if [ $WORK_DIR1 != $WORK_DIR3 ]; then
		test -d $WORK_DIR3 || ln -s $HOST_DIR1 $HOST_DIR3
	fi

:
: Check the server program and work directory are actually available
: ==================================================================
:
	SERVICE_BIN=$EXO_HOME/bin/serve_$APP_CODE
	if ! test -x $SERVICE_BIN; then
		set +x
		echo "$SERVICE_BIN program not available or not executable. Cannot create service."
		exit 1
	fi

	if ! test -d $WORK_DIR1; then
		set +x
		echo "Work directory $WORK_DIR1 is not available. Cannot create service."
		exit 1
	fi

:
: Create the service
: ==================
:
	SERVICE_FILENAME=/etc/systemd/system/$SERVICE_CODE@.service
	TMPFILE=$(mktemp /tmp/create_service.XXXXXXXXX)
:
	cat > $TMPFILE <<-V0G0N
		[Unit]
		Description=$SERVICE_CODE@%i Service
		After=network.target postgresql.service
		#StartLimitBurst=10
		StartLimitIntervalSec=0
		#
		[Service]
		Type=simple
		#Restart=on-failure
		Restart=always
		RestartSec=5
		PIDFile=/run/neo/$SERVICE_CODE@%i.pid
		User=$USER
		WorkingDirectory=$WORK_DIR2
		Environment="EXO_HOME=$EXO_HOME"
		Environment="EXO_DATA=$IDB_CODE"
		Environment="EXO_DICT=$DICTDB"
		Environment="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:$EXO_HOME/bin"
		Environment="EXO_STARTED_BY_SYSTEMD=true"
		Environment="EXO_SERVICE_CODE=$SERVICE_CODE@%i"
		ExecStart=$SERVICE_BIN $IDB_CODES
		ExecReload=/bin/kill -s HUP \$MAINPID
		#StandardOutput=append:/var/log/neo/${IDB_CODE}.log
		#StandardError=append:/var/log/neo/${IDB_CODE}_error.log
		#StandardOutput=syslog
		#StandardError=syslog
		SyslogIdentifier=$SERVICE_CODE@%i
		#
		[Install]
		WantedBy=multi-user.target
V0G0N
:
	sudo mv $TMPFILE $SERVICE_FILENAME
	chmod a+r $SERVICE_FILENAME

:
: Set trigger to reload systemd
: =============================
:
	if [ -z ${DOALL:-} ]; then
		sudo systemctl daemon-reload
	else
		touch /tmp/systemctl.daemon-reload.required
	fi

:
: Configure the exodus service to autostart
: =========================================
:
	sudo systemctl enable $FULL_SERVICE_CODE

:
: NOT Starting the service
: ========================
:
:	sudo service $FULL_SERVICE_CODE start &

:
: Ensure setfacl is installed
: ===========================
:
    which setfacl || apt-get install -y acl

:
: Ensure directory permissions on data/$FULL_DB_CODE
: ==============================================
:
: KEEP IN SYNC. SIMILAR code in create_site, create_service and generalproxy.cpp
:
	DB_DIR=~/hosts/$HOST_DIR/data/$FULL_DB_CODE
	mkdir -p $DB_DIR
	chmod a+srw $DB_DIR
	setfacl -d -m g::rw $DB_DIR

:
: Finished creating service $FULL_SERVICE_CODE
: ===============================================

:
: Managing the service
: ====================
:
: sudo service $FULL_SERVICE_CODE {start/stop/restart/status}
:  or
: ./debug $BASE_DB_CODE
:  or
: cd $WORK_DIR1
: 'export PATH=$PATH:$HOME/neo/bin'
: serve_agy
:
: tail /var/log/syslog -f
:
: service $FULL_SERVICE_CODE status || true
