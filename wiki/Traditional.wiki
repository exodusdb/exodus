=== Traditional Multivalue Functions and Statements (non-OO) ===

Exodus clones traditional multivalue function and statement behaviour and retains their syntax as far as possible.

  * Traditional functions are rendered as Exodus functions.
  * Traditional statements are rendered as Exodus subroutines.

==== String Commands ====

The use of most of Exodus's subroutines and functions will be obvious to traditional multivalue programmers. Ηοwever there are many ending in "-er" for example "converter()" which are slightly novel. All Exodus's "-er" statements are designed to modify strings IN PLACE instead of returning new strings. They therefore correspond to the old multivalue string manipulation commands.

For example, the efficient classic multivalue "modify in-place" string conversion command:

 CONVERT 'ab' TO 'cd' IN ZZ

is now represented in Exodus by:

 converter(zz,"ab","cd");

Traditional multivalue basic did not provide a full set of in-place string modification commands leading to inefficiencies. For example, traditional multivalue basic has a TRIM() function which returns a new string. However there was no TRIM X statement which would modify the string in-place which in many cases would be much faster.

To solve this problem, Exodus provides a complete set of in-place string modification "command functions" with the characteristic ending "-er". For example Exodus's fieldstorer() modifies the string in-place whereas fieldstore() returns a new string which is commonly .

==== Function Types ====

||TYPE	||FUNCTION TYPE||
||var=	||traditional functions that return values||
||if	||traditional conditional statements that started with if or ended with then or else (or could have)||
||cmd	||traditional commands with no outputs||
||cmd2	||traditional commands that had parameters on the left hand side of the = assigments (or -er functions)||

==== Parameters Types ====

||in|| Parameters that provide data to the function. Can be variables or raw data like 1 or "X"||
||io|| Parameters that may provide and/or return data. Must be variables not raw data like 1 or "X"||
||out|| Parameters that return data. Must be variables not raw data like 1 or "X"||
||blank||The default. Parameters that provide data to the function. Can be variables or raw data like 1 or "X"||

Optional Parameters

||Key	||Default||
||=""	||""||
||=" "	||" "||
||="."	||"."||
||=1	||1 ||
||=0	||0||
||=true	||true||
||=false	||false||

==== Complete List of Functions ====

Environment
||var=	||osgetenv(name)||
||if	||osgetenv(name, out value)||
||if	||ossetenv(name, value)||

Time/Date/Sleep
||var=	||date()||
||var=	||time()||
||var=	||timedate()||
||cmd	||ossleep(milliseconds)||
||var=	||ostime()||

System File
||if	||osopen(filename, out filehandle)||
||cmd	||osclose(filehandle)||
||var=	||osbread(filehandle, startoffset, length)||
||cmd	||osbread(out data, filehandle, startoffset, length)||
||cmd	||osbwrite(data, filehandle, startoffset)||
||if	||osread(out data, osfilename)||
||var=	||osread(osfilename)||
||if	||oswrite(data, osfilename)||
||if	||osdelete(osfilename)||
||if	||osrename(oldosfilename, newosfilename)||
||if	||oscopy(fromosdir_or_filename, newosdir_or_filename)||
||cmd	||osflush()||

System Directory
||var=	||oslist(path=".", wildcard="", mode=0)||
||var=	||oslistf(path=".", wildcard="")||
||var=	||oslistd(path=".", wildcard="")||
||var=	||osfile(filename)||
||var=	||osdir(filename)||
||if	||osmkdir(dirname)||
||if	||osrmdir(dirname, evenifnotempty=false)||
||var=	||oscwd()||
||var=	||oscwd(dirname)||

Program Control
||var=	||suspend(command)||
||var=	||osshell(command)||
||cmd	||stop(text="")||
||cmd	||abort(text)||
||var=	||perform(command)||
||var=	||execute(command)||
||var=	||chain(command)||
||var=	||logoff()||
||cmd	||debug()||

Status
||if    ||assigned(mv1)||
||if    ||unassigned(mv1)||

Console Output
||cmd	||print(mv1)||
||cmd	||printl(mv1="")||
||cmd	||printt(mv1="")||

Cursor
||var=	||at(columnorcode)||
||var=	||at(column, row)||
||var=	||getcursor()||
||cmd	||setcursor(cursor)||
||var=	||getprompt()||
||cmd	||setprompt(prompt)||

Console Input
||var=	||input()||
||var=	||input(prompt, out inpstr)||
||var=	||inputn(n)||

Numbers
||var=    ||rnd(number)||
||cmd    ||initrnd(seednumber)||
||var=    ||mod(dividend, divisor)||

String Construction
||var=  ||chr(integer)||
||var=    ||str(instring, number)||
||var=    ||space(number)||

String Info/Search
||var=  ||count(instring, substrx)||
||var=  ||dcount(instring, substrx)||
||var=  ||index(instring, substr, startchar1=1)||
||var=  ||len(mv1)||
||var=  ||length(mv1)||
||if    ||match(instring, matchstr, options="")||
||var=  ||seq(char1)||

String Functions
||var=	||convert(instring, fromchars, tochars)||
||var=  ||crop(instring)||
||var=  ||field(instring, substrx, fieldnx, nfieldsx=1)||
||var=  ||field2(instring, substrx, fieldnx, nfieldsx=1)||
||var=  ||fieldstore(instring, sepchar, fieldn, nfields, replacement)||
||var=	||lcase(instring)||
||var=	||lower(instring)||
||var=  ||raise(instring)||
||var=  ||splice(instring, start1, length, str)||
||var=	||substr(instring, startx)||
||var=	||substr(instring, startx, length)||
||var=	||swap(instring, fromchars, tochars, options="")||
||var=  ||trim(instring, trimchar=" ")||
||var=  ||trimb(instring, trimchar=" ")||
||var=  ||trimf(instring, trimchar=" ")||
||var=	||ucase(instring)||

String Commands
||cmd2  ||converter(io instring, fromchars, tochars)||
||var=  ||cropper(io instring)||
||cmd2  ||fieldstorer(io instring, sepchar, fieldn, nfields, replacement)||
||cmd2  ||lcaser(io instring)||
||cmd2  ||lowerer(io instring)||
||cmd2  ||quoter(io instring)||
||cmd2  ||raiser(io instring)||
||cmd2  ||splicer(io instring, start1, length, str)||
||var=  ||substrer(io instring, startx)||
||var=  ||substrer(io instring, startx, length)||
||cmd2  ||swapper(io instring, fromchars, tochars, options="")||
||cmd2  ||trimmer(io instring, trimchar=" ")||
||cmd2  ||trimmerb(io instring, trimchar=" ")||
||cmd2  ||trimmerf(io instring, trimchar=" ")||
||var=  ||ucaser(io instring)||

ICONV/OCONV
||var=	||oconv(instring, conversion)||
||var=	||oconv(instring, conversion)||
||var=	||iconv(instring, conversion)||
||var=	||iconv(instring, conversion)||

Database
||if	||connect(connectionstring="")||
||if	||disconnect()||
||if	||createfile(filename, options="")||
||if	||deletefile(filename)||
||if	||clearfile(filename)||
||var=	||listfiles()||
||if	||createindex(filename, fieldname, dictfilename="")||
||if	||deleteindex(filename, fieldname)||
||var=	||listindexes(filename)||
||if	||begin()||
||if	||rollback()||
||if	||end()||

Files and Records
||if	||lock(filehandle, key)||
||cmd	||unlock(filehandle, key)||
||cmd	||unlockall()||
||if	||open(filename, out filehandle)||
||if	||open(dictdata, filename, out filehandle)||
||if	||read(out record, filehandle, key)||
||if	||readv(out record, filehandle, key, fieldnumber)||
||if	||write(record, filehandle, key)||
||if	||writev(record, filehandle, key, fieldn)||
||if	||deleterecord(filehandle, key)||
||if	||updaterecord(record, filehandle, key)||
||if	||insertrecord(record, filehandle, key)||

Record Selection
||if	||select(sortselectclause="")||
||cmd	||clearselect()||
||if	||readnext(out key)||
||if	||readnext(out key, out valueno)||
||if	||selectrecord(sortselectclause="")||
||if	||readnextrecord(out key, out record)||

Dictionary
||var=	||calculate(fieldname)||
||var=	||xlate(filename, key, fieldno, mode)||
||var=	||xlate(filename, key, fieldno, mode)||

Dynamic Array Functions
||var=	||replace(instring, fieldno, valueno, subvalueno, replacement)||
||var=	||extract(instring, fieldno=0, valueno=0, subvalueno=0)||
||var=	||erase(instring, fieldno, valueno=0, subvalueno=0)||
||var=  ||insert(instring, fieldno, valueno, subvalueno, insertion)||
||if	||locate(instring, target, out setting, fieldn=0, valuen=0)||
||if	||locateby(instring, target, ordercode, out setting, fieldn=0, valuen=0)||
||if	||locateusing(instring, target, usingchar, out setting, fieldn=0, valuen=0, subvaluen=0)||
||if	||locateusing(instring, target, usingchar)||
||var=  ||remove(fromstr, io startx, out delimiterno)||
||var=	||sum(instring, sepchar=VM_)||

Dynamic Array Commands
||cmd2 	||replacer(out instring, fieldno, valueno, subvalueno, replacement)||
||cmd2 	||inserter(io instring, fieldno, valueno, subvalueno, insertion)||
||cmd2 	||eraser(io instring, fieldno, valueno=0, subvalueno=0)||